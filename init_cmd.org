#+STARTUP: indent
* system setting
** set default system encoding
#+BEGIN_SRC emacs-lisp
  (set-default-coding-systems 'utf-8)
  (set-language-environment 'UTF-8)
#+END_SRC
* package manipulate
** package initialize
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    (when no-ssl (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
    ;; and `package-pinned-packages`. Most users will not need or want to do this.
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    )
  (package-initialize)
#+END_SRC
** package archives
#+BEGIN_SRC emacs-lisp
  ;(add-to-list  'package-archives '("org" . "https://orgmode.org/elpa"))
#+END_SRC
** package list
#+BEGIN_SRC emacs-lisp
  (setq package-list nil)
  (setq package-list (append package-list '(
                                            helm
                                            helm-swoop

                                            ace-window

                                            magit

                                            org
                                            google-translate

                                            rainbow-delimiters
                                            forecast
                                            company

                                            popwin
                                            expand-region
                                            iedit

                                            helm-ag
                                            which-key
                                            )))
  (setq package-selected-packages 'package-list)
#+END_SRC
** package auto install from list
#+BEGIN_SRC emacs-lisp
  ; fetch the list of packages available
  (unless package-archive-contents
    (package-refresh-contents))

  ; install the missing packages
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC
* emacs setting
** helm
#+BEGIN_SRC emacs-lisp
  (helm-mode)

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)

  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-x r b") 'helm-bookmarks)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)

  (global-set-key (kbd "M-i") 'helm-swoop)
#+END_SRC
** ace-window
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-p") 'ace-window)
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (add-to-list
   'org-babel-load-languages
   '(dot . t))

  (setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC
** google-translate
#+BEGIN_SRC emacs-lisp
  (require 'google-translate)
  (require 'google-translate-smooth-ui)
  (global-set-key "\C-ct" 'google-translate-smooth-translate)
  (setq google-translate-translation-directions-alist
        '(("en" . "zh-TW") ("zh-TW" . "en")))

  (defun google-translate-json-suggestion (json)  
    "Retrieve from JSON (which returns by the
  `google-translate-request' function) suggestion. This function
  does matter when translating misspelled word. So instead of
  translation it is possible to get suggestion."
  (let ((info (aref json 7)))
    (if (and info (> (length info) 0))
        (aref info 1)
      nil))) 
#+END_SRC
** mode line
#+BEGIN_SRC emacs-lisp
  (setq display-time-day-and-date t
        display-time-default-load-average nil
        nyan-animate-nyancat t
        nyan-wavy-trail t
        display-time-24hr-format nil
        display-time-day-and-date t)

  (display-time-mode t)
  (setq display-time-format "%Y-%m-%d %a %H:%M")
  (display-time)
#+END_SRC
** ui
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (global-hl-line-mode t)
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
  (recentf-mode t)
  (setq recentf-max-menu-items 40)
  (global-set-key (kbd "C-x C-r") 'recentf-open-files)
  (delete-selection-mode t)
  (setq inhibit-splash-screen t)
  (global-hungry-delete-mode t)     
  (smartparens-global-mode t)
  (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
  (global-set-key (kbd "C-h C-f") 'find-function)
  (global-set-key (kbd "C-h C-v") 'find-variable)
  (global-set-key (kbd "C-h C-k") 'find-function-on-key)
  (popwin-mode)
  (setq-default cursor-type 'bar)
#+END_SRC
** cancel default function
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq ring-bell-function 'ignore)
#+END_SRC
** weather
#+BEGIN_SRC emacs-lisp
  (require 'forecast)
  (setq calendar-location-name "Tanshui, Taiwan"
        calendar-latitude 25.16
        calendar-longitude 121.43
        forecast-api-key "51621b0965cc3845633acde6f72d1200")

  ;(require 'cl)
  (setq forecast-graph-marker "x"
        forecast-graph-marker-upcoming-max "m"
        forecast-graph-marker-upcoming-min "w")
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (global-company-mode t)
  (setq company-minimum-prefix-length 1)
#+END_SRC
** rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC
** expand region
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-=") 'er/expand-region)
#+END_SRC
** iedit mode
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-s e") 'iedit-mode)
#+END_SRC
** occur
#+BEGIN_SRC emacs-lisp
  (defun occur-on-point()
    "select the word on point as occur default"
    (interactive)
    (push (if (region-active-p)
              (buffer-substring-no-properties
               (region-beginning)
               (region-end))
            (let ((sym (thing-at-point 'symbol)))
              (when (stringp sym)
                (regexp-quote sym))))
          regexp-history)
    (call-interactively 'occur))
  (global-set-key (kbd "M-s o") 'occur-on-point)
#+END_SRC
** indent all
#+BEGIN_SRC emacs-lisp
  (defun indent-buffer()
    "indent the current buffer"
    (interactive)
    (indent-region (point-min) (point-max))
    )
  (defun indent-region-or-buffer()
    "indent the selected region or the current buffer"
    (interactive)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end)) 
            (message "indent region"))
        (progn
          (indent-buffer)
          (message "indent buffer")))))
  (global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)
#+END_SRC
** hippie expand
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-/") 'hippie-expand)
#+END_SRC
** show parenthesis
#+BEGIN_SRC emacs-lisp
  (define-advice show-paren-function (:around (fn) fix-show-paren-function)
    (cond ((looking-at-p "\\s(") (funcall fn))
          (t (save-excursion
               (ignore-errors (backward-up-list))
               (funcall fn)))))

#+END_SRC
** which key
#+BEGIN_SRC emacs-lisp
  (which-key-mode t)

#+END_SRC
** dired mode
#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (put 'dired-find-alternate-file 'disabled nil)
  (with-eval-after-load 'dired
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
#+END_SRC
